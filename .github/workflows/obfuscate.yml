# .github/workflows/obfuscate.yml
name: Prometheus Job Processor
on:
  repository_dispatch:
    types: [prometheus-job-start]

jobs:
  obfuscate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Dependencies
        run: |
          sudo apt-get update
          # We no longer need mongo or luarocks
          sudo apt-get install -y luajit jq

      - name: Run Obfuscator
        id: run_obfuscator # Give this step an ID to reference its output
        env:
          USER_CODE: ${{ github.event.client_payload.code || '' }}
          PROM_PRESET: ${{ github.event.client_payload.preset || 'Strong' }}
        run: |
          chmod +x ./runner.lua || true
          
          # We execute the script and capture its stdout and stderr.
          # stderr is redirected to a file, which we will read if the script fails
          # stdout is captured by the OUTPUT variable
          # '|| true' at the end ensures this step 'succeeds' even if luajit fails,
          # so we can check its exit code in the next steps.
          OUTPUT=$(luajit ./runner.lua 2> stderr.log)
          
          # Store the exit code
          echo "exit_code=$?" >> $GITHUB_ENV

          # Store the stdout as a step output
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF"
          
          # Store the stderr as a step output
          echo "error_log<<EOF" >> $GITHUB_OUTPUT
          cat stderr.log >> $GITHUB_OUTPUT
          echo "EOF"

      - name: Report Success to Vercel
        # This step only runs if the exit code from the script was 0
        if: env.exit_code == 0
        env:
          JOB_ID: ${{ github.event.client.payload.job_id }}
          # This URL must be set in your GitHub repo secrets
          VERCEL_WEBHOOK_URL: ${{ secrets.VERCEL_COMPLETE_URL }} 
          # This secret must also be in your GitHub repo secrets
          WORKER_SECRET: ${{ secrets.WORKER_SECRET }}
          # Get the 'result' output from the 'run_obfuscator' step
          OBFUSCATED_CODE: ${{ steps.run_obfuscator.outputs.result }}
        run: |
          # Prepare JSON payload using jq
          PAYLOAD=$(jq -n \
            --arg jid "$JOB_ID" \
            --arg code "$OBFUSCATED_CODE" \
            '{ "jobId": $jid, "status": "COMPLETED", "obfuscatedCode": $code, "error": null }')

          # Post the result, -f causes curl to fail on HTTP errors
          curl -f -X POST "$VERCEL_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $WORKER_SECRET" \
            -d "$PAYLOAD"

      - name: Report Failure to Vercel
        # This step ONLY runs if the exit code was NOT 0
        if: env.exit_code != 0
        env:
          JOB_ID: ${{ github.event.client.payload.job_id }}
          VERCEL_WEBHOOK_URL: ${{ secrets.VERCEL_COMPLETE_URL }}
          WORKER_SECRET: ${{ secrets.WORKER_SECRET }}
          # Get the 'error_log' output from the 'run_obfuscator' step
          ERROR_MESSAGE: ${{ steps.run_obfuscator.outputs.error_log }}
        run: |
          # Prepare JSON payload with the error
          PAYLOAD=$(jq -n \
            --arg jid "$JOB_ID" \
            --arg err "$ERROR_MESSAGE" \
            '{ "jobId": $jid, "status": "FAILED", "obfuscatedCode": null, "error": $err }')

          # Post the result, -f causes curl to fail on HTTP errors
          curl -f -X POST "$VERCEL_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $WORKER_SECRET" \
            -d "$PAYLOAD"

