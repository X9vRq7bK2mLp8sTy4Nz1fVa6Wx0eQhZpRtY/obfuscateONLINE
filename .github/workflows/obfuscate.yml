# .github/workflows/obfuscate.yml
name: Prometheus Job Processor
on:
  repository_dispatch:
    types: [prometheus-job-start]

jobs:
  obfuscate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y luajit jq

      - name: Run Obfuscator
        id: run_obfuscator
        env:
          USER_CODE: ${{ github.event.client_payload.code || '' }}
          PROM_PRESET: ${{ github.event.client_payload.preset || 'Strong' }}
        run: |
          chmod +x ./runner.lua || true
          
          OUTPUT=$(luajit ./runner.lua 2> stderr.log)
          
          echo "exit_code=$?" >> $GITHUB_ENV

          # --- FIX: Robustly set multiline 'result' output ---
          DELIMITER_RESULT=$(openssl rand -hex 16)
          echo "result<<$DELIMITER_RESULT" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "$DELIMITER_RESULT" >> $GITHUB_OUTPUT
          
          # --- FIX: Robustly set multiline 'error_log' output ---
          DELIMITER_ERROR=$(openssl rand -hex 16)
          echo "error_log<<$DELIMITER_ERROR" >> $GITHUB_OUTPUT
          cat stderr.log >> $GITHUB_OUTPUT
          echo "$DELIMITER_ERROR" >> $GITHUB_OUTPUT

      - name: Report Success to Vercel
        # This step only runs if the exit code from the script was 0
        if: env.exit_code == 0
        env:
          JOB_ID: ${{ github.event.client.payload.job_id }}
          VERCEL_WEBHOOK_URL: ${{ secrets.VERCEL_COMPLETE_URL }} 
          WORKER_SECRET: ${{ secrets.WORKER_SECRET }}
          # We get the output directly from the step context
          OBFUSCATED_CODE: ${{ steps.run_obfuscator.outputs.result }}
        run: |
          # --- FIX: Pipe the code directly into jq to build the payload ---
          # This avoids shell expansion/mangling of the complex code string.
          # 'jq -n -R' reads the entire stdin (from 'echo') as one raw string ('.')
          PAYLOAD=$(echo "$OBFUSCATED_CODE" | jq -n -R \
            --arg jid "$JOB_ID" \
            '{ "jobId": $jid, "status": "COMPLETED", "obfuscatedCode": ., "error": null }')

          # Post the result, -f causes curl to fail on HTTP errors
          curl -f -X POST "$VERCEL_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $WORKER_SECRET" \
            -d "$PAYLOAD"

      - name: Report Failure to Vercel
        # This step ONLY runs if the exit code was NOT 0
        if: env.exit_code != 0
        env:
          JOB_ID: ${{ github.event.client.payload.job_id }}
          VERCEL_WEBHOOK_URL: ${{ secrets.VERCEL_COMPLETE_URL }}
          WORKER_SECRET: ${{ secrets.WORKER_SECRET }}
          ERROR_MESSAGE: ${{ steps.run_obfuscator.outputs.error_log }}
        run: |
          # --- FIX: Apply the same robust piping method for the error log ---
          PAYLOAD=$(echo "$ERROR_MESSAGE" | jq -n -R \
            --arg jid "$JOB_ID" \
            '{ "jobId": $jid, "status": "FAILED", "obfuscatedCode": null, "error": . }')

          # Post the result, -f causes curl to fail on HTTP errors
          curl -f -X POST "$VERCEL_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $WORKER_SECRET" \
            -d "$PAYLOAD"

